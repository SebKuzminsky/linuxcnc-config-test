#!/usr/bin/env python3

import argparse
import atexit
import pathlib
import signal
import subprocess
import sys
import time


container = None


def run(cmd):
    try:
        result = subprocess.run(
            cmd,
            capture_output=True,
            text=True,
            check=True
        )

    except subprocess.CalledProcessError as e:
        print(f"failed to run program:")
        print(f"    cmd: {cmd}")
        print(f"    returncode: {e.returncode}")
        print(f"    stdout: {e.stdout}")
        print(f"    stderr: {e.stderr}")
        raise e

    return result


def start_detached_container():
    global container

    result = run([
        "docker", "run",
            "--platform=linux/amd64",
            "--detach",
            "--rm",
            "--cpus=2",
            "--cap-add=IPC_LOCK",
            "--cap-add=IPC_OWNER",
            "--cap-add=SYS_ADMIN",
            "--publish=5920:5920",
            "linuxcnc-config-test",
            "bash", "-c", "Xvfb ${DISPLAY} -screen 0 1600x1200x16 & x11vnc -display ${DISPLAY} -N -forever"
    ])

    container = result.stdout.strip()
    atexit.register(kill_container)


def kill_container():
    global container
    if container is not None:
        result = run(['docker', 'kill', container])
        container = None


def run_in_container(cmd):
    global container
    if container is None:
        raise SystemExit("no container running!")

    if type(cmd) is str:
        real_cmd = [ 'bash', '-x', '-c', cmd ]
    else:
        real_cmd = cmd

    return run(["docker", "exec", container, *real_cmd])


start_detached_container()

print("listing available sim configs...")
result = run_in_container('dpkg -L linuxcnc-uspace | grep "sample-configs/sim/.*\.ini"')
kill_container()

sim_configs = result.stdout.split('\n')
print(f"{len(sim_configs)} configs found")

for sim_config in sim_configs:
    # each config looks like '/usr/share/doc/linuxcnc/examples/sample-configs/sim/axis/anglejog/anglejog.ini'
    name_parts = sim_config.split('/')[8:]
    name = '_'.join(name_parts)

    results_dir = pathlib.Path('results') / name
    if results_dir.exists():
        continue

    results_dir.mkdir(parents=True, exist_ok=True)
    for old_file in results_dir.glob("*"):
        old_file.unlink()

    print(f"testing config '{'/'.join(name_parts)}'")

    start_detached_container()


    #
    # run linuxcnc in the container
    #

    linuxcnc_process = subprocess.Popen(
        [
            "docker", "exec", container,
            'bash', '-x', '-c', f'su --pty -c "linuxcnc {sim_config}" testrunner'
        ],
        stdin = subprocess.DEVNULL,
        stdout = subprocess.PIPE,
        stderr = subprocess.PIPE,
        text = True
    )

    time.sleep(10)

    run(['vncsnapshot', 'localhost:20', f'{results_dir}/{name}.jpg'])

    r = linuxcnc_process.poll()
    if r is None:
        # process still running, that's good!
        linuxcnc_process.send_signal(signal.SIGINT)
        result = linuxcnc_process.wait(5)
    else:
        # the process died, that's surprising and noteworthy
        print("*** linuxcnc died!")
        open(results_dir/"unexpected-death", "w").write(f"{linuxcnc_process.returncode}")

    # The linuxcnc process may be dead now or it may be alive still,
    # in any case save its output and move on.

    open(results_dir/"stdout", "w").write(linuxcnc_process.stdout.read())
    open(results_dir/"stderr", "w").write(linuxcnc_process.stderr.read())

    kill_container()
